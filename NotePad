import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.io.*;
import java.util.*;

class NotePad extends JFrame  {

	String str = "";
	String file_name ;
	JFrame frame = new JFrame();

	JPanel p1 = new JPanel ();
	JPanel p2 = new JPanel();
	JMenuBar mb = new JMenuBar();

	JTextArea area = new JTextArea();
	JScrollPane scroll = new JScrollPane(p2);

	JMenu file = new JMenu("File");
	JMenu edit = new JMenu("Edit");
	JMenu format = new JMenu("Format");
	JMenu view = new JMenu("View");
	JMenu help = new JMenu("Help");
	JMenu zoom = new JMenu("Zoom");

	// new Menu item
	JMenuItem n = new JMenuItem("New");
	JMenuItem nw = new JMenuItem("New Window");
	JMenuItem open = new JMenuItem("Open");
	JMenuItem save = new JMenuItem("Save");
	JMenuItem save_as = new JMenuItem("Save As..");
	JMenuItem page = new JMenuItem("Page Setup..");
	JMenuItem print = new JMenuItem("Print");
	JMenuItem exit = new JMenuItem("Exit");

	//edit menu item
	JMenuItem undu = new JMenuItem("Undu");
	JMenuItem cut = new JMenuItem("Cut");
	JMenuItem copy = new JMenuItem("Copy");
	JMenuItem paste = new JMenuItem("Paste");
	JMenuItem delete = new JMenuItem("Delete");
	JMenuItem find = new JMenuItem("Find");
	JMenuItem search = new JMenuItem("Search");
	JMenuItem findnext = new JMenuItem("Find Next");
	JMenuItem  findprevious = new JMenuItem("Find Previous");
	JMenuItem replace = new JMenuItem("Replace");
	JMenuItem selectall = new JMenuItem("Select All");
	JMenuItem gt = new JMenuItem("Goto");
	JMenuItem td = new JMenuItem("Time/Date");

	//Format menu item
	JCheckBoxMenuItem ww = new JCheckBoxMenuItem("Word Wrap..");
	JMenuItem font = new JMenuItem("Font");

	//View menu item
	JMenuItem zi = new JMenuItem("Zoom In");
	JMenuItem zo = new JMenuItem("Zoom Out");
	JMenuItem sb = new JMenuItem("Status Bar");
	JMenuItem restore = new JMenuItem("Restore Default Zoom");

	// help item

	JMenuItem vh = new JMenuItem("View Help");
	JMenuItem sf = new JMenuItem("Send Feedback");
	JMenuItem about = new JMenuItem("About Notepad");


	NotePad(){

		setBounds(90,0,1000,650);
		setTitle("Untitled-Notepad");

		n.setMnemonic('N');
		open.setMnemonic ('O');

		// file menu
		open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,KeyEvent.CTRL_MASK));
		open.setToolTipText("file open");
		n.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,KeyEvent.CTRL_MASK));
		n.setToolTipText("open new file");
		save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_MASK));
		save_as.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_MASK+KeyEvent.SHIFT_MASK));
		print.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,KeyEvent.CTRL_MASK));

		// edit menu
		cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.CTRL_MASK));
		copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_MASK));
		paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.CTRL_MASK));
		delete.setAccelerator(KeyStroke.getKeyStroke("del"));
		search.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,KeyEvent.CTRL_MASK));
		find.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK));
		findnext.setAccelerator(KeyStroke.getKeyStroke("F3"));
		findprevious.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3,KeyEvent.SHIFT_MASK));
		replace.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK));
		gt.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G,KeyEvent.CTRL_MASK));
		selectall.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.CTRL_MASK));
		td.setAccelerator(KeyStroke.getKeyStroke("F5"));


		p1.add(mb);
		add(p1,"North");
		mb.add(file);
		mb.add(edit);
		mb.add(format);
		mb.add(view);
		mb.add(help);

		file.add(n);
		file.add(nw);
		file.add(open);
		file.add(save);
		file.add(save_as);
		file.addSeparator();
		file.add(page);
		file.add(print);
		file.addSeparator();
		file.add(exit);

		edit.add(undu);
		edit.addSeparator();
		edit.add(cut);
		edit.add(copy);
		edit.add(paste);
		edit.add(delete);
		edit.addSeparator();
		edit.add(search);
		edit.add(find);
		edit.add(findnext);
		edit.add(findprevious);
		edit.add(replace);
		edit.add(gt);
		edit.addSeparator();
		edit.add(selectall);
		edit.add(td);

		format.add(ww);
		format.add(font);

		view.add(zoom);
		zoom.add(zi);
		zoom.add(zo);
		zoom.add(restore);
		view.add(sb);

		help.add(vh);
		help.add(sf);
		help.addSeparator();
		help.add(about);

		setJMenuBar(mb);
		p2.add(area);
		add(scroll);
		p2.setBackground(Color.WHITE);
		//area.setHorizontalAlignment(JTextField.LEFT);

		n.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent e){



				if(!area.getText().equals("")){

					int x = JOptionPane.showConfirmDialog(null,"DO YOU WANT TO SAVE CHANGES TO Untitled","Notepad",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);

					if(x == JOptionPane.YES_OPTION){

						FileDialog dlg = new FileDialog(frame,"Save",FileDialog.SAVE);
						dlg.setVisible(true);
						file_name = dlg.getFile();

						try{

						PrintWriter fout = new  PrintWriter(new FileWriter(dlg.getDirectory()+file_name));

						str = area.getText();

						fout.print(str);
						fout.close();
						area.setText("");
						}
						catch(Exception ex){}
						}


						else
						if(x == JOptionPane.NO_OPTION)
								area.setText("");
					}
				}//End of Action Perfored
			});

		save.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent e){

				FileDialog dlg = new FileDialog(frame,"Save",FileDialog.SAVE);
				dlg.setVisible(true);

				String save_file = dlg.getFile();

				try{

					PrintWriter fout = new  PrintWriter(new FileWriter(dlg.getDirectory()+save_file));

					String text = area.getText();

					fout.print(text);
					fout.close();

					}
					catch(Exception ex){}
				}
			});

		open.addActionListener(new ActionListener(){


			public void actionPerformed(ActionEvent e){

							FileDialog file = new FileDialog(frame);
							file.setVisible(true);
							file_name = file.getFile();
							String direct = file.getDirectory();
							String concat = direct+file_name;

							try{

									BufferedReader fin = new BufferedReader(new FileReader(concat));

									String line = fin.readLine();

									while(line != null){


									line = fin.readLine();
									str = str+"\n"+line;
												}
									fin.close();
									}
							catch(Exception x){
									if( file_name.equals(null)){}

									else{
											JOptionPane.showMessageDialog(frame,"File Not Exist");
										}

									}
								area.setText(str);
			}//end of action performed

			});

		save_as.addActionListener(new ActionListener (){

			public void actionPerformed(ActionEvent e){

						FileDialog dlg = new FileDialog(frame,"Save",FileDialog.SAVE);
						dlg.setVisible(true);

						String save_file = dlg.getFile();

						try{

							PrintWriter fout = new  PrintWriter(newFileWriter(dlg.getDirectory()+save_file));

							String text = area.getText();

							fout.print(text);
							fout.close();

										}
						catch(Exception ex){}
				}
			});


		page.addActionListener(new ActionListener (){

			public void actionPerformed(ActionEvent e ){



				}


			});

		exit.addActionListener(new ActionListener (){

			public void actionPerformed(ActionEvent e){

				System.exit(1);
				}
			});


		copy.addActionListener(new ActionListener (){

			public void actionPerformed(ActionEvent e){
			area.copy();
				}
			});

		cut.addActionListener(new ActionListener (){

					public void actionPerformed(ActionEvent e){
					area.cut();
						}
					});

		paste.addActionListener(new ActionListener (){

					public void actionPerformed(ActionEvent e){
					area.paste();
						}
					});

		find.addActionListener(new ActionListener(){


					public void actionPerformed(ActionEvent e){

						JFrame findframe = new JFrame();
						findframe.setTitle("Find");
						//findframe.setIconImage((null));

						JLabel label = new JLabel("find what:");
						JLabel matchcase = new JLabel("Match case");
						JLabel wrap = new JLabel("Wraped around");
						JLabel direction = new JLabel("Direction");

						JTextField tf = new JTextField();
						JButton fn = new JButton("Find Next");
						JButton cancle = new JButton("Cancle");
						JCheckBox b1 = new JCheckBox();
						JCheckBox b2 = new JCheckBox();
						JRadioButton up = new JRadioButton();
						JRadioButton down = new JRadioButton();
						JLabel upl = new JLabel("up");
						JLabel downl = new JLabel("down");


						findframe.setBounds(500,300,400,200);
						findframe.setResizable(false);
						findframe.setLayout(null);


						label.setBounds(5,2,100,40);
						tf.setBounds(70,15,200,20);
						fn.setBounds(275,15,90,18);
						cancle.setBounds(275,40,90,18);
						b1.setBounds(5,80,40,40);
						b2.setBounds(5,110,40,40);
						matchcase.setBounds(45,80,100,40);
						wrap.setBounds(45,110,100,40);
						direction.setBounds(170,40,100,40);
						up.setBounds(150,80,20,20);
						upl.setBounds(170,80,40,17);
						down.setBounds(190,80,20,20);
					   	 downl.setBounds(210,80,40,17);
						findframe.add(label);
						findframe.add(tf);
						findframe.add(fn);
						findframe.add(cancle);
						findframe.add(b1);
						findframe.add(b2);
						findframe.add(wrap);
						findframe.add(matchcase);
						findframe.add(direction);
						findframe.add(up);
						findframe.add(upl);
						findframe.add(down);
						findframe.add(downl);

						findframe.setVisible(true);

						}
			});

		}// end of constructor

		public static void main(String[] args ){

			NotePad np = new NotePad();
			np.setVisible(true);

			}
	}
