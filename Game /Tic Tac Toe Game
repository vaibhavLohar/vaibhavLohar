package Abstraction;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TicTacToeGame extends JFrame implements ActionListener {
    private JButton[][] buttons;
    private char currentPlayer;
    private int movesCount;
    private String playerXName;
    private String playerOName;
    private JLabel currentPlayerLabel; // Label to display current player name
    private char lastWinner; // Track the last winner
    private JTextField playerXField; // Text field for Player X name
    private JTextField playerOField; // Text field for Player O name
    private JButton startButton; // Button to start the game

    public TicTacToeGame() {
        initializeUI();
    }

    private void initializeUI() {
        currentPlayer = 'X'; // Player X starts
        movesCount = 0;
        buttons = new JButton[3][3];
        setTitle("Tic Tac Toe");
        setSize(1000, 1000);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false); // Prevent resizing
        getContentPane().setBackground(Color.LIGHT_GRAY); // Set layout color
        setLayout(new BorderLayout()); // Use BorderLayout for better layout management

        // Create a panel for player name input
        JPanel namePanel = new JPanel();
        namePanel.setLayout(new FlowLayout());
        namePanel.setBackground(Color.WHITE); // Set name panel background color to white
        namePanel.setPreferredSize(new Dimension(1000, 150)); // Increase the size of the name panel

        // Increase the width and height of the text fields
        playerXField = new JTextField(10); // Increase the width of the text field
        playerOField = new JTextField(10); // Increase the width of the text field
        playerXField.setPreferredSize(new Dimension(150, 50)); // Set preferred size for player X field
        playerOField.setPreferredSize(new Dimension(150, 50)); // Set preferred size for player O field
        startButton = new JButton("Start Game");
        startButton.setBackground(Color.ORANGE); // Set start button color to orange
        startButton.setForeground(Color.WHITE); // Set text color of the button to white
        startButton.setPreferredSize(new Dimension(250, 50)); // Increase the size of the start button

        // Set text field background color to blue
        playerXField.setBackground(Color.BLUE);
        playerOField.setBackground(Color.BLUE);
        playerXField.setForeground(Color.WHITE); // Set text color to white
        playerOField.setForeground(Color.WHITE); // Set text color to white

        // Set font size for text fields
        Font font = new Font("Arial", Font.PLAIN, 30); // Change "Arial" and size as needed
        playerXField.setFont(font);
        playerOField.setFont(font);

        // Set font size for labels
        Font labelFont = new Font("Arial", Font.PLAIN, 25); // Change "Arial" and size as needed
        JLabel playerXLabel = new JLabel("Player X Name:");
        playerXLabel.setFont(labelFont); // Set font for player X label
        JLabel playerOLabel = new JLabel("Player O Name:");
        playerOLabel.setFont(labelFont); // Set font for player O label

        namePanel.add(playerXLabel);
        namePanel.add(playerXField);
        namePanel.add(playerOLabel);
        namePanel.add(playerOField);
        namePanel.add(startButton);

        // Add action listener to the start button
        startButton.addActionListener(e -> startGame());

        // Create a panel for the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 3));

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton("*");
                buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 100)); // Increase button font size
                buttons[i][j].setPreferredSize(new Dimension(200, 200)); // Set preferred size for buttons
                buttons[i][j].setFocusPainted(false);
                buttons[i][j].setForeground(Color.WHITE); // Set button text color to white
                buttons[i][j].setBackground(Color.BLACK); // Set button background color to black
                buttons[i][j].addActionListener(this);
                buttons[i][j].setEnabled(false); // Disable buttons initially
                buttonPanel.add(buttons[i][j]);
            }
        }

        // Create a panel for the current player's label
        JPanel currentPlayerPanel = new JPanel();
        currentPlayerPanel.setBackground(Color.BLACK); // Set background color to black
        currentPlayerLabel = new JLabel("", SwingConstants.CENTER);
        currentPlayerLabel.setFont(new Font("Arial", Font.PLAIN, 40)); // Decrease font size for the label
        currentPlayerLabel.setForeground(Color.WHITE); // Set text color to white
        currentPlayerPanel.add(currentPlayerLabel);

        // Add components to the frame
        add(namePanel, BorderLayout.NORTH);
        add(currentPlayerPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        setVisible(true);
    }

    private void startGame() {
        playerXName = playerXField.getText().trim();
        playerOName = playerOField.getText().trim();

        // Validate player names
        if (playerXName.isEmpty() || playerOName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Player names cannot be empty. Please enter valid names.");
            return; // Do not start the game if names are empty
        }

        if (playerXName.equalsIgnoreCase(playerOName)) {
            JOptionPane.showMessageDialog(this, "Player names cannot be the same. Please enter different names.");
            return; // Do not start the game if names are the same
        }

        // Start the game
        currentPlayerLabel.setText(playerXName + "'s turn");
        startButton.setEnabled(false); // Disable the start button after starting the game

        // Enable the game board buttons
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setEnabled(true); // Enable buttons for gameplay
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton clickedButton = (JButton) e.getSource();
        if (clickedButton.getText().equals("*")) {
            clickedButton.setText(String.valueOf(currentPlayer));
            // Set the color based on the current player
            if (currentPlayer == 'X') {
                clickedButton.setForeground(Color.RED); // Set color for X
            } else {
                clickedButton.setForeground(Color.BLUE); // Set color for O
            }
            movesCount++;

            if (checkForWin()) {
                lastWinner = currentPlayer; // Track the last winner
                JOptionPane.showMessageDialog(this, (currentPlayer == 'X' ? playerXName : playerOName) + " wins!");
                if (!askToPlayAgain()) {
                    System.exit(0);
                }
                resetGame(true); // Reset game and change the starting player
            } else if (movesCount == 9) {
                JOptionPane.showMessageDialog(this, "The game is a draw!");
                if (!askToPlayAgain()) {
                    System.exit(0);
                }
                resetGame(false); // Reset game without changing the starting player
            } else {
                changePlayer();
            }
        }
    }

    private void changePlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        // Update the current player label
        currentPlayerLabel.setText((currentPlayer == 'X' ? playerXName : playerOName) + "'s turn");
    }

    private boolean checkForWin() {
        // Check rows, columns, and diagonals
        for (int i = 0; i < 3; i++) {
            if (checkRowCol(buttons[i][0].getText().charAt(0), buttons[i][1].getText().charAt(0), buttons[i][2].getText().charAt(0)) ||
                    checkRowCol(buttons[0][i].getText().charAt(0), buttons[1][i].getText().charAt(0), buttons[2][i].getText().charAt(0))) {
                return true;
            }
        }
        return checkRowCol(buttons[0][0].getText().charAt(0), buttons[1][1].getText().charAt(0), buttons[2][2].getText().charAt(0)) ||
                checkRowCol(buttons[0][2].getText().charAt(0), buttons[1][1].getText().charAt(0), buttons[2][0].getText().charAt(0));
    }

    private boolean checkRowCol(char c1, char c2, char c3) {
        return (c1 != '*' && c1 == c2 && c1 == c3);
    }

    private void resetGame(boolean changeStartingPlayer) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("*");
                buttons[i][j].setForeground(Color.WHITE); // Reset button text color to white
                buttons[i][j].setBackground(Color.BLACK); // Reset button background color to black
            }
        }
        movesCount = 0;
        if (changeStartingPlayer) {
            // Change starting player based on the last winner
            currentPlayer = (lastWinner == 'X') ? 'O' : 'X'; // The loser starts first
        } else {
            currentPlayer = 'X'; // Reset to Player X
        }
        currentPlayerLabel.setText((currentPlayer == 'X' ? playerXName : playerOName) + "'s turn"); // Reset the label
    }

    private boolean askToPlayAgain() {
        int response = JOptionPane.showConfirmDialog(this, "Do you want to play again?", "Play Again", JOptionPane.YES_NO_OPTION);
        return response == JOptionPane.YES_OPTION;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TicTacToeGame());
    }
}
