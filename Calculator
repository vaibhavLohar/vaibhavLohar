import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Calculator extends JFrame implements ActionListener {
    private JTextField display;
    private StringBuilder currentInput = new StringBuilder();
    private double lastResult = 0;
    private String lastOperator = "";
    private boolean startNewInput = true;

    public Calculator() {
        setTitle("Calculator");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(360, 480);
        setMinimumSize(new Dimension(320, 480));
        setLocationRelativeTo(null);

        initUI();
    }

    private void initUI() {
        
        Container pane = getContentPane();
        pane.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        display = new JTextField("0");
        display.setFont(new Font("Inter", Font.PLAIN, 32));
        display.setHorizontalAlignment(SwingConstants.RIGHT);
        display.setEditable(false);
        display.setBackground(Color.WHITE);
        display.setForeground(Color.BLACK);
        display.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        display.setPreferredSize(new Dimension(320, 60)); 

        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridwidth = 4;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 16, 20, 16);
        pane.add(display, gbc);

        // Buttons panel
        JPanel buttonsPanel = new JPanel(new GridBagLayout());
        buttonsPanel.setBackground(new Color(245, 251, 251)); 

        String[][] buttons = {
                {"C", "%", "Back", "÷"},
                {"7", "8", "9", "×"},
                {"4", "5", "6", "−"},
                {"1", "2", "3", "+"},
                {"00", "0", ".", "="}
        };

        Color textColor = Color.BLACK;
        Color operatorColor = new Color(6, 182, 212); 

        gbc.gridwidth = 1;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.BOTH;

        for (int row = 0; row < buttons.length; row++) {
            for (int col = 0; col < buttons[row].length; col++) {
                String text = buttons[row][col];
                JButton btn = new JButton();

                switch (text) {
                    case "Back":
                        
                        btn.setText("\u232B"); 
                        btn.setFont(new Font("Inter", Font.PLAIN, 26));
                        btn.setToolTipText("Backspace");
                        btn.setForeground(operatorColor);
                        break;
                    case "C":
                    case "%":
                    case "÷":
                    case "×":
                    case "−":
                    case "+":
                    case "=":
                        btn.setText(text);
                        btn.setFont(new Font("Inter", Font.BOLD, 24));
                        btn.setForeground(operatorColor);
                        break;
                    default:
                        btn.setText(text);
                        btn.setFont(new Font("Inter", Font.PLAIN, 24));
                        btn.setForeground(textColor);
                }

                btn.setFocusPainted(false);
                btn.setBackground(Color.WHITE);
                btn.addActionListener(this);

                gbc.gridx = col;
                gbc.gridy = row;
                buttonsPanel.add(btn, gbc);
            }
        }

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 16, 16, 16);
        pane.add(buttonsPanel, gbc);
    }

    private double calculate(double a, double b, String op) {
        switch (op) {
            case "+":
                return a + b;
            case "−":
                return a - b;
            case "×":
                return a * b;
            case "÷":
                if (b == 0) {
                    JOptionPane.showMessageDialog(this, "Cannot divide by zero", "Error", JOptionPane.ERROR_MESSAGE);
                    return a;
                }
                return a / b;
            case "%":
                return a % b;
            default:
                return b;
        }
    }

    public void actionPerformed(ActionEvent e) {
        String cmd = ((JButton) e.getSource()).getText();

        if (cmd.equals("C")) {
            currentInput.setLength(0);
            lastOperator = "";
            lastResult = 0;
            display.setText("0");
            startNewInput = true;
        } else if (cmd.equals("\u232B")) { 
            if (!startNewInput && currentInput.length() > 0) {
                currentInput.deleteCharAt(currentInput.length() - 1);
                display.setText(currentInput.length() == 0 ? "0" : currentInput.toString());
            }
        } else if ("+-−×÷%".contains(cmd)) {
            if (!startNewInput) {
                double inputValue = Double.parseDouble(currentInput.toString());
                if (lastOperator.isEmpty()) {
                    lastResult = inputValue;
                } else {
                    lastResult = calculate(lastResult, inputValue, lastOperator);
                }
               
                display.setText(removeTrailingZeros(lastResult) + " " + cmd);
            }
            lastOperator = cmd;
            startNewInput = true;
            currentInput.setLength(0);
        } else if (cmd.equals("=")) {
            if (!lastOperator.isEmpty() && !startNewInput) {
                double inputValue = Double.parseDouble(currentInput.toString());
                lastResult = calculate(lastResult, inputValue, lastOperator);
                display.setText(removeTrailingZeros(lastResult));
                lastOperator = "";
                currentInput.setLength(0);
                startNewInput = true;
            }
        } else {
            if (startNewInput) {
                currentInput.setLength(0);
                startNewInput = false;
            }
            if (cmd.equals(".") && currentInput.toString().contains(".")) {
                return;
            }
            currentInput.append(cmd);
            display.setText(currentInput.toString());
        }
    }

    private String removeTrailingZeros(double val) {
        if(val == (long) val)
            return String.format("%d", (long) val);
        else
            return String.format("%s", val);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Calculator calc = new Calculator();
            calc.setVisible(true);
        });
    }
}
